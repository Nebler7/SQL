#Here are LeetCode questions and my answers using MySQL.

--A country is big if:
  --it has an area of at least three million (i.e., 3000000 km2), or
  --it has a population of at least twenty-five million (i.e., 25000000).
--Write an SQL query to report the name, population, and area of the big countries.
SELECT name, population, area 
FROM World 
WHERE area >= 3000000 
OR population >= 25000000;

--Write an SQL query to find the ids of products that are both low fat and recyclable.
SELECT product_id 
FROM Products 
WHERE low_fats = 'Y' 
AND recyclable = 'Y';

--Write an SQL query to report the names of the customer that are not referred by the customer with id = 2.
SELECT name 
FROM Customer 
WHERE referee_id != 2 
OR referee_id IS NULL;

--Write an SQL query to report all customers who never order anything.
SELECT customers.name AS Customers 
FROM customers 
WHERE customers.id 
NOT IN (SELECT customerid FROM orders);

--Write an SQL query to calculate the bonus of each employee. The bonus of an employee is 100% of their salary if the ID of the employee is an odd number and the employee name does not start with the character 'M'. The bonus of an employee is 0 otherwise. Return the result table ordered by employee_id.
SELECT employee_id,
CASE
WHEN employee_id %2!=0 AND name NOT LIKE 'M%' THEN salary
ELSE 0
END AS Bonus
FROM Employees
ORDER BY employee_id; 

--Write an SQL query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.
UPDATE Salary SET sex = IF(sex = 'm', 'f', 'm');

--Write an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id. 
DELETE p1
FROM Person p1, Person p2
WHERE p1.Email = p2.Email AND p1.Id > p2.Id;

--Write an SQL query to fix the names so that only the first character is uppercase and the rest are lowercase. Return the result table ordered by user_id.
SELECT user_id, CONCAT(UCASE(LEFT(name, 1)), LCASE(SUBSTRING(name, 2))) AS name FROM Users ORDER BY user_id;

--Write an SQL query to find for each date the number of different products sold and their names. The sold products names for each date should be sorted lexicographically.Return the result table ordered by sell_date.
SELECT sell_date, COUNT(distinct product) AS num_sold, GROUP_CONCAT(distinct product ORDER BY product) AS products 
FROM Activities 
GROUP BY sell_date 
ORDER BY sell_date;

--Write an SQL query to report the patient_id, patient_name all conditions of patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.
SELECT patient_id, patient_name, conditions
FROM Patients
WHERE conditions LIKE 'DIAB1%' 
OR conditions LIKE '% DIAB1%';

--Write an SQL query to report the IDs of all the employees with missing information. The information of an employee is missing if:
  --The employee's name is missing, or
  --The employee's salary is missing.
--Return the result table ordered by employee_id in ascending order.
SELECT employee_id 
FROM Employees 
WHERE employee_id NOT IN 
(SELECT employee_id FROM Salaries) 
UNION 
SELECT employee_id 
FROM Salaries 
WHERE employee_id NOT IN 
(SELECT employee_id FROM Employees) 
ORDER BY employee_id ASC;

--Write an SQL query to rearrange the Products table so that each row has (product_id, store, price). If a product is not available in a store, do not include a row with that product_id and store combination in the result table.
SELECT product_id, 'store1' AS store, store1 AS price 
FROM Products 
WHERE store1 IS NOT NULL
UNION
SELECT product_id, 'store2' AS store, store2 AS price 
FROM Products 
WHERE store2 IS NOT NULL
UNION
SELECT product_id, 'store3' AS store, store3 AS price 
FROM Products 
WHERE store3 IS NOT NULL;

--Each node in the tree can be one of three types:
  --"Leaf": if the node is a leaf node.
  --"Root": if the node is the root of the tree.
  --"Inner": If the node is neither a leaf node nor a root node.
--Write an SQL query to report the type of each node in the tree. Return the result table ordered by id in ascending order.
SELECT id,
CASE
WHEN p_id IS NULL THEN 'Root'
WHEN id NOT IN (SELECT distinct p_id FROM Tree WHERE p_id IS NOT NULL) THEN 'Leaf'
ELSE 'Inner'
END AS type
FROM Tree
ORDER by id ASC;

--Write an SQL query to report the second highest salary from the Employee table. If there is no second highest salary, the query should report null.
Write an SQL query to report the second highest salary from the Employee table. If there is no second highest salary, the query should report null.
SELECT
IFNULL((SELECT distinct salary 
FROM Employee 
ORDER BY salary DESC 
LIMIT 1, 1), NULL) 
AS SecondHighestSalary;

--Write an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.
SELECT p.firstname, p.lastname, a.city, a.state 
FROM Person p 
LEFT JOIN Address a 
ON a.personId = p.personId;

--Write an SQL query to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.
SELECT v.customer_id, COUNT(v.customer_id) AS count_no_trans 
FROM Visits v 
LEFT JOIN Transactions t
ON v.visit_id = t.visit_id 
WHERE t.visit_id IS NULL 
GROUP BY v.customer_id;

--Write an SQL query to find all the authors that viewed at least one of their own articles. Return the result table sorted by id in ascending order.
SELECT distinct author_id AS id 
FROM Views 
WHERE author_id = viewer_id 
ORDER BY author_id ASC;

--Write an SQL query to find all dates' Id with higher temperatures compared to its previous dates (yesterday).
SELECT w1.id 
FROM Weather w1, Weather w2 
WHERE w1.temperature > w2.temperature 
AND datediff (w1.recordDate, w2.recordDate) = 1; 

--Write an SQL query to report the names of all the salespersons who did not have any orders related to the company with the name "RED".
SELECT sp.name 
FROM SalesPerson sp 
WHERE sp.sales_id 
NOT IN 
(SELECT o.sales_id 
FROM Orders o
LEFT JOIN Company c 
ON o.com_id = c.com_id 
WHERE c.name = 'RED');

--Write an SQL query to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.
SELECT activity_date AS day, COUNT(distinct user_id) AS active_users 
FROM Activity 
WHERE activity_date 
between DATE('2019-06-28') AND DATE('2019-07-27') 
GROUP BY activity_date;

--Write an SQL query that will, for each date_id and make_name, return the number of distinct lead_id's and distinct partner_id's.
SELECT date_id, make_name, COUNT(distinct lead_id) AS unique_leads, COUNT(distinct partner_id) AS unique_partners 
FROM DailySales 
GROUP BY date_id, make_name;

--Write an SQL query that will, for each user, return the number of followers.
SELECT user_id, COUNT(follower_id) AS followers_count 
FROM Followers 
GROUP BY user_id 
ORDER BY user_id ASC;

--Write an SQL query to find the customer_number for the customer who has placed the largest number of orders.
SELECT customer_number 
FROM Orders 
GROUP BY customer_number 
ORDER BY COUNT(order_number) DESC 
LIMIT 1;

--Write an SQL query to report the first login date for each player.
SELECT distinct player_id, MIN(event_date) AS first_login 
FROM Activity 
GROUP BY player_id;

--Write an SQL query to report the latest login for all users in the year 2020. Do not include the users who did not login in 2020.
SELECT distinct user_id, MAX(time_stamp) AS last_stamp 
FROM Logins 
WHERE time_stamp 
LIKE '2020%' 
GROUP BY user_id;

--Write an SQL query to calculate the total time in minutes spent by each employee on each day at the office. Note that within one day, an employee can enter and leave more than once. The time spent in the office for a single entry is out_time - in_time.
SELECT event_day AS day, emp_id, SUM(out_time - in_time) AS total_time 
FROM Employees 
GROUP BY event_day, emp_id;

--Write an SQL query to report the Capital gain/loss for each stock. The Capital gain/loss of a stock is the total gain or loss after buying and selling the stock one or many times.
SELECT stock_name, 
SUM(CASE WHEN operation = 'Sell' THEN Price ELSE 0 END) - 
SUM(CASE WHEN operation = 'Buy' THEN Price ELSE 0 END) AS capital_gain_loss 
FROM stocks
GROUP BY stock_name;

--Write an SQL query to report the distance traveled by each user. Return the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order.
SELECT  name, 
SUM(CASE WHEN distance IS null THEN 0 ELSE distance END) AS travelled_distance 
FROM Users u 
LEFT JOIN Rides r 
ON u.id = r.user_id 
GROUP BY user_id
ORDER BY travelled_distance DESC, name ASC;

--Write an SQL query to find for each user, the join date and the number of orders they made as a buyer in 2019.
SELECT user_id AS buyer_id, join_date, COUNT(order_date) AS orders_in_2019 
FROM Users u 
LEFT JOIN Orders o 
ON u.user_id = o.buyer_id  
AND YEAR(order_date) = 2019 
GROUP BY user_id;








